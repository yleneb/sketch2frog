name: sketch2frog
channels:
  - anaconda
  - defaults
dependencies:
  - autopep8=1.4.4
  # - catboost=0.22
  - colorama=0.4.3
  # - dask=2.11.0
  # - dask-ml=1.2.0
  - ipykernel=5.5.3
  - ipython=7.12.0
  - jedi=0.15.2
  - jupyter=1.0.0
  - matplotlib=3.4.1
  - nb_conda_kernels=2.3.1
  - numexpr=2.7.1
  - numpy=1.20.0
  - pandas=1.2.4
  - pip=21.0.1
  - plotly=4.14.3
  - pyarrow=0.15.1
  - python=3.8.8
  - scikit-learn=0.24.1
  - scikit-image=0.18.2
  # - scipy=1.4.1
  - pip:
    - albumentations==1.0.3
    # - dask-xgboost==0.1.10
    - graphviz==0.13.2
    - jupyter_contrib_nbextensions==0.5.1
    # - kaggle==1.5.6
    # - pandarallel==1.4.6
    - Pillow==7.1.2
    - pdpbox==0.2.0
    - pydot==1.4.2
    - tensorflow==2.4.1
    - tensorflow-addons==0.12.1
    - tensorflow-datasets==4.3.0
    - tensorflow-hub==0.8.0
    - tqdm==4.42.0
    - treeinterpreter==0.2.2
    - wandb==0.12.1
    # - xgboost==1.0.2

# prune uninstalls packages that were removed
# conda env update --name myenv --file local.yml --prune
# or from within the environment
# conda env update --file local.yml --prune

# 1. Create a project folder in the ~/repos/ directory on my computer.
# 2. Create an environment.yml file in the directory. 
#    Typically the environment name will be the same as the folder name.
#    At minimum, it will specify the version of Python I want to use;
#    it will often include anaconda as a dependency.
# 3. Create the conda environment with $ conda env create.
# 4. Activate the conda environment with $ source activate ENV_NAME.
# 5. Create a .env file containing the line source activate ENV_NAME.
#    Because I have autoenv installed, this file will be run every time
#    I navigate to the project folder in the Terminal.
#    Therefore, my conda environment will be activated as soon as I navigate to the folder.
# 6. Run $ git init to make the folder a Git repository.
#    I then run $ git add environment.yml && git commit -m 'initial commit'
#    to add the YAML file to the repository.
# 7. If I want to push the repository to Github, I use $ git create using Github's hub commands.
#    I then push the master branch with $ git push -u origin master.
# As I add dependencies to my project, I try to be sure I add them to my environment.yml file.